// Code generated by "stringer -type OpCode -trimprefix op"; DO NOT EDIT.

package wasm

import "strconv"

const (
	_OpCode_name_0 = "UnreachableNopBlockLoopIfElse"
	_OpCode_name_1 = "EndBrBrIfBrTableReturnCallCallIndirect"
	_OpCode_name_2 = "DropSelect"
	_OpCode_name_3 = "GetLocalSetLocalTeeLocalGetGlobalSetGlobal"
	_OpCode_name_4 = "I32LoadI64LoadF32LoadF64LoadI32Load8SI32Load8UI32Load16SI32Load16UI64Load8SI64Load8UI64Load16SI64Load16UI64Load32SI64Load32UI32StoreI64StoreF32StoreF64StoreI32Store8I32Store16I64Store8I64Store16I64Store32CurrentMemoryGrowMemoryI32ConstI64ConstF32ConstF64ConstI32EqzI32EqI32NeI32LtSI32LtUI32GtSI32GtUI32LeSI32LeUI32GeSI32GeUI64EqzI64EqI64NeI64LtSI64LtUI64GtSI64GtUI64LeSI64LeUI64GeSI64GeUF32EqF32NeF32LtF32GtF32LeF32GeF64EqF64NeF64LtF64GtF64LeF64GeI32ClzI32CtzI32PopcntI32AddI32SubI32MulI32DivSI32DivUI32RemsI32RemuI32AndI32OrI32XorI32ShlI32ShrSI32ShrUI32RotlI32RotrI64ClzI64CtzI64PopcntI64AddI64SubI64MulI64DivSI64DivUI64RemSI64RemUI64AndI64OrI64XorI64ShlI64ShrSI64ShrUI64RotlI64RotrF32AbsF32NegF32CeilF32FloorF32TruncF32NearestF32SqrtF32AddF32SubF32MulF32DivF32MinF32MaxF32CopysignF64AbsF64NegF64CeilF64FloorF64TruncF64NearestF64SqrtF64AddF64SubF64MulF64DivF64MinF64MaxF64CopysignI32WrapI64I32TruncSF32I32TruncUF32I32TruncSF64I32TruncUF64I64ExtendSI32I64ExtendUI32I64TruncSF32I64TruncUF32I64TruncSF64I64TruncUF64F32ConvertSI32F32ConvertUI32F32ConvertSI64F32ConvertUI64F32DemoteF64F64ConvertSI32F64ConvertUI32F64ConvertSI64F64ConvertUI64F64PromoteF32I32ReinterpretF32I64ReinterpretF64F32ReinterpretI32F64ReinterpretI64"
)

var (
	_OpCode_index_0 = [...]uint8{0, 11, 14, 19, 23, 25, 29}
	_OpCode_index_1 = [...]uint8{0, 3, 5, 9, 16, 22, 26, 38}
	_OpCode_index_2 = [...]uint8{0, 4, 10}
	_OpCode_index_3 = [...]uint8{0, 8, 16, 24, 33, 42}
	_OpCode_index_4 = [...]uint16{0, 7, 14, 21, 28, 37, 46, 56, 66, 75, 84, 94, 104, 114, 124, 132, 140, 148, 156, 165, 175, 184, 194, 204, 217, 227, 235, 243, 251, 259, 265, 270, 275, 281, 287, 293, 299, 305, 311, 317, 323, 329, 334, 339, 345, 351, 357, 363, 369, 375, 381, 387, 392, 397, 402, 407, 412, 417, 422, 427, 432, 437, 442, 447, 453, 459, 468, 474, 480, 486, 493, 500, 507, 514, 520, 525, 531, 537, 544, 551, 558, 565, 571, 577, 586, 592, 598, 604, 611, 618, 625, 632, 638, 643, 649, 655, 662, 669, 676, 683, 689, 695, 702, 710, 718, 728, 735, 741, 747, 753, 759, 765, 771, 782, 788, 794, 801, 809, 817, 827, 834, 840, 846, 852, 858, 864, 870, 881, 891, 903, 915, 927, 939, 952, 965, 977, 989, 1001, 1013, 1027, 1041, 1055, 1069, 1081, 1095, 1109, 1123, 1137, 1150, 1167, 1184, 1201, 1218}
)

func (i OpCode) String() string {
	switch {
	case 0 <= i && i <= 5:
		return _OpCode_name_0[_OpCode_index_0[i]:_OpCode_index_0[i+1]]
	case 11 <= i && i <= 17:
		i -= 11
		return _OpCode_name_1[_OpCode_index_1[i]:_OpCode_index_1[i+1]]
	case 26 <= i && i <= 27:
		i -= 26
		return _OpCode_name_2[_OpCode_index_2[i]:_OpCode_index_2[i+1]]
	case 32 <= i && i <= 36:
		i -= 32
		return _OpCode_name_3[_OpCode_index_3[i]:_OpCode_index_3[i+1]]
	case 40 <= i && i <= 191:
		i -= 40
		return _OpCode_name_4[_OpCode_index_4[i]:_OpCode_index_4[i+1]]
	default:
		return "OpCode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
